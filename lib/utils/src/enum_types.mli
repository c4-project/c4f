(* This file is part of c4f.

   Copyright (c) 2018-2022 C4 Project

   c4t itself is licensed under the MIT License. See the LICENSE file in the
   project root for more information.

   Parts of c4t are based on code from the Herdtools7 project
   (https://github.com/herd/herdtools7) : see the LICENSE.herd file in the
   project root for more information. *)

open Base

(** [S] is an interface for enums, compatible with those derived by
    ppx_deriving's enum plugin. *)
module type S = sig
  type t

  val min : int
  (** [min] gets the index of the minimum element. *)

  val max : int
  (** [max] gets the index of the maximum element. *)

  val to_enum : t -> int
  (** [to_enum x] converts [x] to its index. *)

  val of_enum : int -> t option
  (** [of_enum k] tries to get the element with index [k]. *)
end

(** [S_enumerate] is a different interface for enums, compatible with those
    derived by Jane Street's [enumerate]. *)
module type S_enumerate = sig
  type t [@@deriving equal, enumerate]
end

(** [S_sexp] extends [S] with S-expression support, compatible with
    [deriving sexp]. *)
module type S_sexp = sig
  include S

  include Sexpable.S with type t := t
end

(** [S_table] extends [S] with a string table.

    [S_table] doesn't contain [Sexpable], as we derive it from the string
    table itself. *)
module type S_table = sig
  include S

  include String_table.Table with type t := t
end

(** [Extension] is an extended interface for enums, generated by applying
    [Extend] to an [SSexp]. *)
module type Extension = sig
  type t [@@deriving sexp, quickcheck, hash]

  include Comparable.S with type t := t

  val to_enum : t -> int
  (** [to_enum x] converts [x] to its index. *)

  val of_enum : int -> t option
  (** [of_enum k] tries to get the element with index [k]. *)

  val of_enum_exn : int -> t
  (** [of_enum_exn k] behaves like [of_enum k], but raises an exception if k
      isn't a valid index. *)

  val min_enum : int
  (** [min_enum] is the enum's [min] value, renamed so as not to clash with
      the comparable version. *)

  val max_enum : int
  (** [max_enum] is the enum's [max] value, renamed so as not to clash with
      the comparable version. *)

  val all_list : unit -> t list
  (** [all_list] lists every element in [t] in ascending order. *)

  val all_set : unit -> (t, comparator_witness) Set.t
  (** [all_set] gets the universe set of [t]. *)
end

(** [Extension_table] is an extended form of [Extension], including
    properties gleaned from a [String_table]. *)
module type Extension_table = sig
  include Extension

  include String_table.S with type t := t

  include Stringable.S with type t := t

  include Plumbing.Jsonable_types.S with type t := t

  include Pretty_printer.S with type t := t

  val of_string_option : string -> t option
  (** [of_string_option] is the same as [of_string] in [StringTable.Intf],
      but renamed so as not to clash with the [Stringable] version. *)
end
