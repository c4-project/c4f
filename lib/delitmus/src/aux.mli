(* This file is part of c4f.

   Copyright (c) 2018-2022 C4 Project

   c4t itself is licensed under the MIT License. See the LICENSE file in the
   project root for more information.

   Parts of c4t are based on code from the Herdtools7 project
   (https://github.com/herd/herdtools7) : see the LICENSE.herd file in the
   project root for more information. *)

(** Auxiliary information generated by a de-litmusification round.

    This combines both the auxiliary information from the litmus test itself,
    as well as information about the variables and thread IDs that were in
    use in the body of the Litmus test. *)

open Base
open Import

(** Type of aux records. *)
type t =
  { litmus_header: Litmus_c.Header.t
  ; function_map: Function_map.t
  ; var_map: Var_map.t }
[@@deriving accessors, equal, yojson]

(** {1 Constructors} *)

val make :
     ?litmus_header:Fir.Constant.t Litmus.Header.t
  -> ?function_map:Function_map.t
  -> ?var_map:Var_map.t
  -> unit
  -> t
(** [make ?litmus_header ?function_map ?var_map ()] builds a delitmus aux
    record for a test with variable migration map [var_map] (empty by
    default), function migration map [function_map] (empty by default), and
    Litmus test header [litmus_header] (empty by default). *)

val empty : t
(** [empty] is the empty aux record. *)

(** {1 Loading and storing delitmus aux records} *)

include Plumbing.Loadable_types.S with type t := t

(** The auxiliary information can be pretty-printed; doing so is guaranteed
    to output its JSON reading in a human-readable manner. *)

include Pretty_printer.S with type t := t
